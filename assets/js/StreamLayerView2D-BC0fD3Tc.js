import{v as s,w as n,x as l,e9 as m,s as u,i2 as h,g as d,f6 as y}from"./test-Dp3_P59c.js";import{g as c}from"./FeatureSet-DR2_MLz0.js";import{n as _,c as g}from"./FeatureLayerView2D-4HifxL-i.js";import{d as f}from"./FeatureFilter-Dp8Yy4C1.js";import"./index-CulM0VMq.js";import"./vendor-CHjNVy30.js";import"./station-CTe-uNfl.js";import"./Container-nTJJr0sk.js";import"./featureConversionUtils-BISEwGRc.js";import"./OptimizedFeature-99IiHQtf.js";import"./memoryEstimations-T_QTZf5l.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./labelingInfo-HpcBILMX.js";import"./SimpleRenderer-Cv_4-yU7.js";import"./commonProperties-Cz4LY7so.js";import"./colorRamps-B0gQZwFY.js";import"./ColorStop-Cu9MX0m5.js";import"./visualVariableUtils-CZtJQX17.js";import"./jsonUtils-C0_9DqtZ.js";import"./defaults3D-B9tjgcmU.js";import"./defaults-B2ew532g.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-U8EJ9Zmb.js";import"./diffUtils-CRH5h29A.js";import"./RendererLegendOptions-BX0ZTuxr.js";import"./styleUtils-B7fY0eUg.js";import"./NormalizationBinParametersMixin-D7jY13wx.js";import"./labelUtils-BD42FNJJ.js";import"./timeSupport-Cqr6rFi4.js";import"./AttributeBinsFeatureSet-D2nvNrVI.js";import"./AttributeBinsQuery-D_VzJKss.js";import"./queryUtils-BylZ_vR4.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-CoCzclvP.js";import"./LayerView2D-DxXX3c7V.js";import"./layerViewUtils-Czal1042.js";import"./TechniqueInstance-CNUlgOWf.js";import"./UpdateTracking2D-B0TUFUJJ.js";import"./Utils-Bm80xURG.js";import"./BoundingBox--wDAJExW.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-BDE4CJ-7.js";import"./VertexArrayObject-mBBhA4PL.js";import"./TileContainer-CL9Z8Eti.js";import"./WGLContainer-VMVtADP5.js";import"./ProgramTemplate-PTbonQFa.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-Bk9QDbvE.js";import"./enums-DCdj6Lab.js";import"./config-DHajyIwB.js";import"./FeatureCommandQueue-C-iLIVn4.js";import"./CIMSymbolHelper-BmV9wdNT.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-DnbNKBN0.js";import"./utils-Bn4MiHWW.js";import"./defaultCIMValues-eS1WuCTt.js";import"./rasterizingUtils-CmuecSwa.js";import"./floatRGBA-OxTzrX3-.js";import"./Rect-CUzevAry.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-BSI09JqU.js";import"./ShaderBuilder-C59RPvP-.js";import"./BindType-BBwFZqyN.js";import"./utils-B9giqtuX.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CzCwOPyO.js";import"./CircularArray-CujHzHWW.js";import"./OrderByInfo-BRAutEHC.js";import"./heatmapUtils-DD4QNsCV.js";import"./SDFHelper-DsJxQoHK.js";import"./constants-B4mRqufT.js";import"./bundle-B2FM5W1M.js";import"./displayFilterUtils-DEO713VP.js";import"./FeatureEffect-CuBFMCn2.js";import"./floorFilterUtils-n6UOt7ty.js";import"./popupUtils-CsRvIy5_.js";import"./LayerView-Bprwomg0.js";import"./RefreshableLayerView-BcsUZr_I.js";const v=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:f})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let o=class extends v(g){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m((()=>this.layer.customParameters),(async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)})),this.layer.on("send-message-to-socket",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)})),this.layer.on("send-message-to-client",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()})),m((()=>this.layer.purgeOptions),(()=>this._update())),m((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new u("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return h(e.map((i=>this.on(i,t))));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then((i=>i.streamMessenger.enableEvent(e,!0)));const p=super.on(e,t),a=this;return d((()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then((i=>i.streamMessenger.enableEvent(e,!1))))}))}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new u("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return _(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then((p=>{const a=c.fromJSON(p);return a.features.forEach((i=>{i.layer=this.layer,i.sourceLayer=this.layer})),a})),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(y)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then((e=>e.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((e=>e.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((e=>e.streamMessenger.clear())),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([l("esri.views.2d.layers.StreamLayerView2D")],o);const ze=o;export{ze as default};
