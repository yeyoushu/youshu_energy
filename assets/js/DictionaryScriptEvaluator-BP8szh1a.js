import{dX as g,V as c,s as m}from"./test-Dp3_P59c.js";import{Z as u}from"./FieldsIndex-dVB9L1ZQ.js";import{m as h,f as y}from"./ArcadeExpression-Dcbbajtk.js";class f{static async from(e,r,i){const n=e.dictionary_version?g.parse(e.dictionary_version):null,o=new Set(e.itemsNames),s={};if(r)for(const t in r)s[t]=r[t];if(e.authoringInfo.configuration)for(const t of e.authoringInfo.configuration)s.hasOwnProperty(t.name)||(s[t.name]=t.value);const a=new Set(e.authoringInfo.symbol);for(const t of Object.keys(i))a.delete(t);a.size&&c.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("missing-fields: fieldMap entries for the following symbol fields are missing",{symbolFields:a});const d=await h(e.expression,null,s);if(!d)throw new m("dictionary-renderer:expression-error","Unable to create dictionary renderer expression");const l=!n||!n.greaterEqual(4,0);l&&c.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("Dictionary script does not support native field types. Applying fallback",{version:n});const p=new _(i,l);return new f(l,o,d,p)}constructor(e,r,i,n){this._requiresFieldCoercionToString=e,this._itemNames=r,this._compiled=i,this._reader=n}get itemNames(){return this._itemNames}evaluate(e,r,i,n){try{return this._reader.bind(e,i,n),this._compiled.evaluate(this._reader,{$view:{scale:r}})}catch(o){c.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("arcade: dictionary script evaluation failed",{error:o})}return null}createDictionaryFieldsIndex(e){if(!this._requiresFieldCoercionToString)return new u(e);const r=e.map((i=>({...i,type:"esriFieldTypeString"})));return new u(r)}}class _ extends y{constructor(e,r){super(),this._fieldMap=e,this._requiresFieldCoercionToString=r}_getField(e){const r=this._fieldMap[e]??e;return this._boundSchema.fieldsIndex.get(r)}field(e){if(!this._requiresFieldCoercionToString)return super.field(e,!1);const r=this._getField(e);return r==null||this._boundTarget.attributes[r.name]==null?"":""+this._boundTarget.attributes[r.name]}}export{f as s};
