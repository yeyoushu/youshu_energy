import{cN as p,s as m,L as s}from"./test-Dp3_P59c.js";import{p as n}from"./MeshVertexAttributes-B7QBM4je.js";import{B as c}from"./vertexSpaceConversion-DPJCPz_Z.js";import"./index-CulM0VMq.js";import"./vendor-CHjNVy30.js";import"./station-CTe-uNfl.js";import"./meshProperties-Cj6q1fp6.js";import"./computeTranslationToOriginAndRotation-B3HgMnyy.js";import"./meshVertexSpaceUtils-DJqF3X5b.js";import"./MeshLocalVertexSpace-BIS3_7WL.js";import"./vec3-dMx4sFX_.js";import"./BufferView-CgSr7tXI.js";import"./vec4-DEigWiEW.js";async function y(t,r,o){await Promise.resolve(),p(o);const e=c(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{y as convertMeshVertexSpace};
