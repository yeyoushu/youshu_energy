import{cN as p,s as m,L as s}from"./test-DMnSxVQs.js";import{p as n}from"./MeshVertexAttributes-xGPVcWFa.js";import{B as c}from"./vertexSpaceConversion-V-RwHtes.js";import"./index-BJQUWR-1.js";import"./vendor-CHjNVy30.js";import"./station-DfQHTTxy.js";import"./meshProperties-Cj6q1fp6.js";import"./computeTranslationToOriginAndRotation-B5dlshrR.js";import"./meshVertexSpaceUtils-C_yYfkz_.js";import"./MeshLocalVertexSpace-pp_jQN70.js";import"./vec3-DKP8VnvX.js";import"./BufferView-CRrbrpVC.js";import"./vec4-DLWrDfQy.js";async function y(t,r,o){await Promise.resolve(),p(o);const e=c(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{y as convertMeshVertexSpace};
