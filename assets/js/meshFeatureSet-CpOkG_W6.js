import{V as d,cm as l,a_ as h,f as S,d as g}from"./test-Dp3_P59c.js";import E from"./Mesh-CF0cJOOR.js";import{n as N,i as D}from"./External-DpL5W0tO.js";import{s as M}from"./infoFor3D-VMSlSy0z.js";import{g as F}from"./FeatureSet-DR2_MLz0.js";import{n as T,i as I}from"./meshFeatureAttributes-BL00iY87.js";import"./index-CulM0VMq.js";import"./vendor-CHjNVy30.js";import"./station-CTe-uNfl.js";import"./axisAngleDegrees-7e8IY39v.js";import"./quat-LJUBQ7U8.js";import"./MeshComponent-A9h5loeE.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshLocalVertexSpace-BIS3_7WL.js";import"./MeshTransform-DD5i_qG7.js";import"./MeshVertexAttributes-B7QBM4je.js";import"./meshVertexSpaceUtils-DJqF3X5b.js";import"./triangulationUtils-BO2sofXm.js";import"./Indices-CFyKJVVM.js";import"./deduplicate-DKrV6nlJ.js";import"./vertexSpaceConversion-DPJCPz_Z.js";import"./computeTranslationToOriginAndRotation-B3HgMnyy.js";import"./vec3-dMx4sFX_.js";import"./BufferView-CgSr7tXI.js";import"./vec4-DEigWiEW.js";const w=()=>d.getLogger("esri.rest.support.meshFeatureSet");function st(t,s,e){const r=e.features;e.features=[],delete e.geometryType;const o=F.fromJSON(e);if(o.geometryType="mesh",!e.assetMaps)return o;const n=$(s,e.assetMaps),i=t.sourceSpatialReference??S.WGS84,p=e.globalIdFieldName,{outFields:a}=t,f=a!=null&&a.length>0?L(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const m=O(u,p,i,s,n);o.features.push(new g({geometry:m,attributes:f(u)}))}return o}function L(t){return({attributes:s})=>{if(!s)return{};if(!t)return s;for(const e in s)t.has(e)||delete s[e];return s}}function O(t,s,e,r,o){const n=t.attributes[s],i=o.get(n);if(i==null||!t.geometry)return null;const p=T(t.attributes,e,r.transformFieldRoles),a=h.fromJSON(t.geometry);a.spatialReference=e;const f=I(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",m=b(i);return m?E.createWithExternalSource(p,m,{extent:a,transform:f,vertexSpace:u,unitConversionDisabled:!0}):E.createIncomplete(p,{extent:a,transform:f,vertexSpace:u})}var c;function $(t,s){const e=new Map;for(const r of s){const o=r.parentGlobalId;if(o==null)continue;const n=r.assetName,i=r.assetType,p=r.assetHash,a=r.assetURL,f=r.conversionStatus,u=r.seqNo,m=M(i,t.supportedFormats);if(!m){w().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const y=l(e,o,(()=>({files:new Map})));l(y.files,n,(()=>({name:n,type:i,mimeType:m,status:P(f),parts:[]}))).parts[u]={hash:p,url:a}}return e}function b(t){const s=Array.from(t.files.values()),e=new Array;for(const r of s){if(r.status!==c.COMPLETED)return null;const o=new Array;for(const n of r.parts){if(!n)return null;o.push(new N(n.url,n.hash))}e.push(new D(r.name,r.mimeType,o))}return{type:"service",assets:e}}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{$ as assetMapFromAssetMapsJSON,O as extractMesh,st as meshFeatureSetFromJSON};
