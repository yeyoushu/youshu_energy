import{fq as _,fu as S,fs as T,ft as b,fv as w,fr as O,fT as $,F as R,f as v,I as W,H as c,g8 as f,g9 as U,fX as P,s as h,p as j,dC as B,fd as I,f4 as L,fw as A,v as s,w as a,d9 as C,bQ as M,ga as N,fB as k,x as D}from"./test-Dp3_P59c.js";import{i as J}from"./APIKeyMixin-CNR1gULI.js";import{p as q}from"./ArcGISCachedService-DXvaqoTf.js";import{m as G,f as V,a as x}from"./SublayersOwner-YZhONfAq.js";import{l as E}from"./ArcGISService-CvJlLKAW.js";import{e as F}from"./CustomParametersMixin-DnycMbXv.js";import"./index-CulM0VMq.js";import"./vendor-CHjNVy30.js";import"./station-CTe-uNfl.js";import"./TileInfoTilemapCache-faFFkMzr.js";import"./TilemapCache-D472H-1O.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./memoryEstimations-T_QTZf5l.js";import"./QueryTask-OsVRS9TU.js";import"./infoFor3D-VMSlSy0z.js";import"./executeForIds-B7TBDwdz.js";import"./query-D7rDZ32y.js";import"./pbfQueryUtils-DPE1auIa.js";import"./pbf-JmGe42-A.js";import"./OptimizedFeature-99IiHQtf.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-3rRSqsEH.js";import"./executeQueryJSON-DY3OMOWy.js";import"./FeatureSet-DR2_MLz0.js";import"./featureConversionUtils-BISEwGRc.js";import"./OrderedLayer-D6-zNrUd.js";import"./OrderByInfo-BRAutEHC.js";import"./labelingInfo-HpcBILMX.js";import"./SimpleRenderer-Cv_4-yU7.js";import"./commonProperties-Cz4LY7so.js";import"./colorRamps-B0gQZwFY.js";import"./ColorStop-Cu9MX0m5.js";import"./visualVariableUtils-CZtJQX17.js";import"./jsonUtils-C0_9DqtZ.js";import"./defaults3D-B9tjgcmU.js";import"./defaults-B2ew532g.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-U8EJ9Zmb.js";import"./diffUtils-CRH5h29A.js";import"./RendererLegendOptions-BX0ZTuxr.js";import"./styleUtils-B7fY0eUg.js";import"./NormalizationBinParametersMixin-D7jY13wx.js";import"./labelUtils-BD42FNJJ.js";import"./FeatureType-rNOlx-wE.js";import"./FeatureTemplate-NyiQ8gPj.js";import"./FieldsIndex-dVB9L1ZQ.js";import"./UnknownTimeZone-CD5-cTzw.js";import"./LayerFloorInfo-CGkss_sI.js";import"./Relationship-ZVIB7Bqn.js";import"./serviceCapabilitiesUtils-Cibhll9V.js";import"./typeUtils-D_YGTMGu.js";import"./ClassBreaksRenderer-D8UibT1q.js";import"./DictionaryScriptEvaluator-BP8szh1a.js";import"./ArcadeExpression-Dcbbajtk.js";import"./TimeOnly-CSJYFsnz.js";import"./enum-DYiiI-Eb.js";import"./utils-Bn4MiHWW.js";import"./defaultCIMValues-eS1WuCTt.js";import"./enums-DCdj6Lab.js";import"./heatmapUtils-DD4QNsCV.js";import"./popupUtils-sYzRdAbr.js";import"./sublayerUtils-DgGAE1vz.js";var d;const y=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends _(S(G(q(V(T(b(E(w(O(J(F(A)))))))))))){constructor(...e){super(...e),this.listMode="show",this.elevationInfo=new $({mode:"on-the-ground"}),this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(R).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo?.spatialReference)&&v.fromJSON(e)}writeSublayers(e,r,t,o){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten((({sublayers:p})=>p&&p.toArray().reverse())).toArray(),l=[],u={writeSublayerStructure:!1,...o};n.forEach((p=>{const m=p.write({},u);l.push(m)})),l.some((p=>Object.keys(p).length>1))&&(r.layers=l)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((r=>W(r).path)):null}fetchTile(e,r,t,o={}){const{signal:n}=o,l=this.getTileUrl(e,r,t),u={responseType:"image",signal:n,query:{...this.refreshParameters}};return c(l,u).then((p=>p.data))}async fetchImageBitmapTile(e,r,t,o={}){const{signal:n}=o;if(this.fetchTile!==d.prototype.fetchTile){const m=await this.fetchTile(e,r,t,o);return f(m,e,r,t,n)}const l=this.getTileUrl(e,r,t),u={responseType:"blob",signal:n,query:{...this.refreshParameters}},{data:p}=await c(l,u);return f(p,e,r,t,n)}getTileUrl(e,r,t){const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,n=U({...this.parsedUrl?.query,blankTile:!o&&null,...this.customParameters,token:this.apiKey}),l=this.tileServers;return`${l&&l.length?l[r%l.length]:this.parsedUrl?.path}/tile/${e}/${r}/${t}${n?"?"+n:""}`}loadAll(){return P(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new h("tile-layer:undefined-url","layer's url is not defined");const o=j(this.parsedUrl.path);if(o!=null&&o.serverType==="ImageServer")throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");c(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)})).then((r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!B(t))return this._fetchServerVersion(t,e).then((o=>{this.read({currentVersion:o})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!I(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return c(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((o=>{if(o.data?.currentVersion)return o.data.currentVersion;throw new h("tile-layer:version-not-available","Server did not provide a version")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,o=y.length;t<o;t++)if(r=y[t],r.toLowerCase().includes(e))return L("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};s([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),s([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),s([a()],i.prototype,"elevationInfo",void 0),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([a({type:Boolean})],i.prototype,"resampling",void 0),s([a()],i.prototype,"sourceJSON",void 0),s([a({type:v})],i.prototype,"spatialReference",void 0),s([C("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),s([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),s([a({readOnly:!0})],i.prototype,"sublayers",void 0),s([M("sublayers",{layers:{type:[x]}})],i.prototype,"writeSublayers",null),s([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([a()],i.prototype,"tileServers",null),s([N("tileServers")],i.prototype,"castTileServers",null),s([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),s([a(k)],i.prototype,"url",void 0),i=d=s([D("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const ir=i;export{ir as default};
