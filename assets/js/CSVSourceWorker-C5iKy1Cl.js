import{cq as I,eU as D,s as F,f6 as V,dz as j,dd as A,V as P,I as R,H as L,cj as T,ci as G,dN as Q,c$ as M,hU as J,hT as U,f as Z,eS as B,q as Y}from"./test-DMnSxVQs.js";import{e as z,n as H}from"./date-DCujAECq.js";import{t as W}from"./json-Wa8cmqdu.js";import{s as K,e as X}from"./OptimizedFeature-C54A3ei6.js";import{u as ee}from"./executeQueryForSnapping-C8hmU7Re.js";import{f as te}from"./FeatureStore-zNfZtDlB.js";import{x as ie}from"./queryUtils-BbHc-bQ7.js";import{L as ne}from"./QueryEngine-DbTqbZZD.js";import{c as re}from"./number-DfHvDVQ4.js";import{a as se,u as oe}from"./clientSideDefaults-BtCWsW7T.js";import{Z as _}from"./FieldsIndex-HhUW4mjA.js";import"./index-BJQUWR-1.js";import"./vendor-CHjNVy30.js";import"./station-DfQHTTxy.js";import"./memoryEstimations-Bf3XeyNh.js";import"./timeSupport-Cc3r-tDz.js";import"./featureConversionUtils-B6zVmPj5.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./BoundsStore-b6j4HXSi.js";import"./PooledRBush-DagJ475f.js";import"./optimizedFeatureQueryEngineAdapter-CKQYXuRy.js";import"./WhereClauseCache-Bh6eqZce.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./WhereClause-DZvTkx_p.js";import"./TimeOnly-6nuEd6-R.js";import"./enum-Dj4NXxC3.js";import"./UnknownTimeZone-BTcI1Sc1.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-DwvMSTst.js";import"./utils-yikIE6So.js";import"./heatmapUtils-PVivGZel.js";import"./utils-DY2Sc_K6.js";import"./utils-B8wkDuTC.js";import"./ClassBreaksDefinition-B7GFRgXT.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-y0_TYCdu.js";import"./NormalizationBinParametersMixin-BE2oKi81.js";import"./defaultsJSON-GKolV7NZ.js";function ae(s,i,e){i=I(i)?.toLowerCase(),e=I(e)?.toLowerCase();const t=s.map((o=>o.toLowerCase())),n=i?s[t.indexOf(i)]:null,a=e?s[t.indexOf(e)]:null;return{longitudeFieldName:n||s[t.indexOf(ue.find((o=>t.includes(o))))],latitudeFieldName:a||s[t.indexOf(le.find((o=>t.includes(o))))]}}const le=["lat","lat83","latitude","latitude83","latdecdeg","lat_dd","y","ycenter","point_y"],ue=["lon","lng","lng83","long","long83","longitude","longitude83","longdecdeg","long_dd","x","xcenter","point_x"],b=/^\s*"([\S\s]*)"\s*$/,E=/""/g,S=`
`,ce=[","," ",";","|","	"];function*q(s,i,e){let t=0;for(;t<=s.length;){const n=s.indexOf(i,t),a=s.slice(t,n>-1?n:void 0);t+=a.length+i.length,e&&!a.trim()||(yield a)}}function O(s){const i=s.includes(`\r
`)?`\r
`:S;return q(s,i,!0)}function $(s,i){return q(s,i,!1)}function de(s,i,e){s=s.trim(),i=i?.trim();const t=[],n=Array.from(new Set([e?.delimiter,...ce])).filter((o=>o!=null));for(const o of n){const l=N(s,o).length,u=N(i,o).length??l;l>1&&t.push({weight:Math.min(l,u),delimiter:o})}const a=t.sort((({weight:o},{weight:l})=>l-o)).map((({delimiter:o})=>o));for(const o of a){const l=v(s,o).names,u=ae(l,e?.longitudeField,e?.latitudeField);if(u.longitudeFieldName&&u.latitudeFieldName)return{delimiter:o,locationInfo:u}}return{delimiter:a[0],locationInfo:null}}function*C(s,i,e,t=()=>Object.create(null)){const n=O(s);n.next();let a="",o="",l=0,u=t(),d=0;e:for(const y of n){const m=$(y,e);for(const p of m)if(a+=o+p,o="",l+=k(p),l%2==0){if(l>0){const h=b.exec(a);if(!h){u=t(),d=0,a="",l=0;continue e}u[i[d]]=h[1].replaceAll(E,'"'),d++}else u[i[d]]=a,d++;a="",l=0}else o=e;l===0?(yield u,u=t(),d=0):o=S}}function v(s,i){const e=N(s,i).filter((n=>n!=null)),t=e.map((n=>I(n)));for(let n=t.length-1;n>=0;n--)t[n]||(t.splice(n,1),e.splice(n,1));return{names:t,aliases:e}}function N(s,i){if(!s?.length)return[];const e=[];let t="",n="",a=0;const o=$(s,i);for(const l of o)if(t+=n+l,n="",a+=k(l),a%2==0){if(a>0){const u=b.exec(t);u&&e.push(u[1].replaceAll(E,'"'))}else e.push(t);t="",a=0}else n=i;return e}function k(s){let i=0,e=0;for(e=s.indexOf('"',e);e>=0;)i++,e=s.indexOf('"',e+1);return i}function fe(s,i,e,t,n){const a=[],o=C(s,e,i),l=[];for(const u of o){if(l.length===10)break;l.push(u)}for(let u=0;u<e.length;u++){const d=e[u],y=t[u];if(d===n.longitudeFieldName||d===n.latitudeFieldName)a.push({name:d,type:"esriFieldTypeDouble",alias:y});else{let m;switch(me(l.map((p=>p[d])))){case"integer":m="esriFieldTypeInteger";break;case"double":m="esriFieldTypeDouble";break;case"date":m="esriFieldTypeDate";break;default:m="esriFieldTypeString"}a.push({name:d,type:m,alias:y,length:D(m)})}}return a}function me(s){if(!s.length)return"string";const i=/[^+\-.,0-9]/;return s.map((e=>{if(e!==""){if(!i.test(e)){let t=w(e);if(!isNaN(t))return/[.,]/.test(e)||!Number.isInteger(t)||t>214783647||t<-214783648?"double":"integer";if(e.includes("E")&&(t=Number(e),!Number.isNaN(t)||e.includes(",")&&(e=e.replace(",","."),t=Number(e),!Number.isNaN(t))))return"double"}return z(e)?"date":"string"}})).reduce(((e,t)=>e===void 0?t:t===void 0?e:e===t?t:e==="string"||t==="string"?"string":e==="double"||t==="double"?"double":void 0))}const w=(function(){const s=re(),i=new RegExp("^"+s.regexp+"$"),e=new RegExp("["+s.group+"\\s\\xa0]","g"),t=s.factor;return n=>{const a=i.exec(n);if(s.factor=t,!a)return NaN;let o=a[1];if(!a[1]){if(!a[2])return NaN;o=a[2],s.factor*=-1}return o=o.replace(e,"").replace(s.decimal,"."),+o*s.factor}})();function pe(s){return JSON.parse(JSON.stringify(s))}const he=oe("esriGeometryPoint"),ye=["csv"],ge=[0,0];class Fe{constructor(i,e){this.x=i,this.y=e}}class st{constructor(){this._queryEngine=null,this._snapshotFeatures=async i=>{const e=await this._fetch(i);return this._createFeatures(e)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(i,e={}){this._loadOptions=i;const[t]=await Promise.all([this._fetch(e.signal),this._checkProjection(i?.parsingOptions?.spatialReference)]),n=Ie(t,i);this._locationInfo=n.locationInfo,this._delimiter=n.delimiter,this._queryEngine=this._createQueryEngine(n);const a=await this._createFeatures(t);this._queryEngine.featureStore.addMany(a);const{fullExtent:o,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();if(n.layerDefinition.extent=o,l){const{start:u,end:d}=l;n.layerDefinition.timeInfo.timeExtent=[u,d]}return n}async applyEdits(){throw new F("csv-layer:editing-not-supported","applyEdits() is not supported on CSVLayer")}async queryFeatures(i={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(i,e.signal)}async queryFeatureCount(i={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(i,e.signal)}async queryObjectIds(i={},e={}){return await this._waitSnapshotComplete(),(await this._queryEngine.executeQueryForIds(i,e.signal)).filter(V)}async queryExtent(i={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(i,e.signal)}async querySnapping(i,e={}){return await this._waitSnapshotComplete(),ee(this._queryEngine,i,e.signal)}async queryAttributeBins(i,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(i,e.signal)}async refresh(i){this._loadOptions.customParameters=i,this._snapshotTask?.abort(),this._snapshotTask=j(this._snapshotFeatures),this._snapshotTask.promise.then((n=>{this._queryEngine.featureStore.clear(),n&&this._queryEngine.featureStore.addMany(n)}),(n=>{this._queryEngine.featureStore.clear(),A(n)||P.getLogger("esri.layers.CSVLayer").error(new F("csv-layer:refresh","An error occurred during refresh",{error:n}))})),await this._waitSnapshotComplete();const{fullExtent:e,timeExtent:t}=await this._queryEngine.fetchRecomputedExtents();return{extent:e,timeExtent:t}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(i){const{url:e,customParameters:t}=this._loadOptions;if(!e)throw new F("csv-layer:invalid-source","url not defined");const n=R(e);return(await L(n.path,{query:{...n.query,...t},responseType:"text",signal:i})).data}_createQueryEngine(i){const{objectIdField:e,fields:t,extent:n,timeInfo:a}=i.layerDefinition,o=new te({geometryType:"esriGeometryPoint",hasM:!1,hasZ:!1}),l={type:"object-id",fieldName:e};return new ne({fieldsIndex:_.fromLayerJSON({fields:t,dateFieldsTimeReference:{timeZoneIANA:T}}),geometryType:"esriGeometryPoint",hasM:!1,hasZ:!1,timeInfo:a,featureIdInfo:l,spatialReference:n.spatialReference||{wkid:4326},featureStore:o})}async _createFeatures(i){const{latitudeFieldName:e,longitudeFieldName:t}=this._locationInfo,{objectIdField:n,fieldsIndex:a,spatialReference:o}=this._queryEngine;let l=[];const u=[],d=a.fields.filter((r=>r.name!==n)).map((r=>r.name));let y=0;const m={};for(const r of a.fields)if(r.type!=="esriFieldTypeOID"&&r.type!=="esriFieldTypeGlobalID"){const c=G(r);c!==void 0&&(m[r.name]=c)}const p=C(i,d,this._delimiter,se(m,n));for(const r of p){const c=this._parseCoordinateValue(r[e]),g=this._parseCoordinateValue(r[t]);if(g!=null&&c!=null&&!isNaN(c)&&!isNaN(g)){r[e]=c,r[t]=g;for(const f in r)if(f!==e&&f!==t)if(a.isDateField(f))r[f]=H(r[f]);else if(a.isNumericField(f)){const x=w(r[f]);isNaN(x)?r[f]=null:r[f]=x}else r[f]!=null&&(r[f]=pe(r[f]));r[n]=y,y++,l.push(new Fe(g,c)),u.push(r)}}if(!Q({wkid:4326},o))if(M(o))for(const r of l)[r.x,r.y]=J(r.x,r.y,ge);else l=U(W,l,Z.WGS84,o,null,null);const h=[];for(let r=0;r<l.length;r++){const{x:c,y:g}=l[r],f=u[r];f[n]=r+1,h.push(new K(new X([],[c,g]),f,null,f[n]))}return h}_parseCoordinateValue(i){if(i==null||i==="")return null;let e=w(i);return(isNaN(e)||Math.abs(e)>181)&&(e=parseFloat(i)),e}async _checkProjection(i){try{await ie(B,i)}catch{throw new F("csv-layer:projection-not-supported","Projection not supported")}}}function Ie(s,i){const e=i.parsingOptions||{},t={delimiter:e.delimiter,layerDefinition:null,locationInfo:{latitudeFieldName:e.latitudeField,longitudeFieldName:e.longitudeField}},n=t.layerDefinition={name:Y(i.url,ye)||"csv",dateFieldsTimeReference:{timeZoneIANA:T},drawingInfo:he,geometryType:"esriGeometryPoint",objectIdField:null,fields:[],timeInfo:e.timeInfo,extent:{xmin:Number.POSITIVE_INFINITY,ymin:Number.POSITIVE_INFINITY,xmax:Number.NEGATIVE_INFINITY,ymax:Number.NEGATIVE_INFINITY,spatialReference:e.spatialReference||{wkid:4326}}},a=O(s),o=a.next().value?.trim(),l=a.next().value?.trim();if(!o)throw new F("csv-layer:empty-csv","CSV is empty",{csv:s});const{delimiter:u,locationInfo:d}=de(o,l,e);if(!u)throw new F("csv-layer:invalid-delimiter","Unable to detect the delimiter from CSV",{firstLine:o,secondLine:l,parsingOptions:e});if(!d)throw new F("csv-layer:location-fields-not-found","Unable to identify latitude and longitude fields from the CSV file",{firstLine:o,secondLine:l,parsingOptions:e});t.locationInfo=d,t.delimiter=u;const{names:y,aliases:m}=v(o,u),p=fe(s,t.delimiter,y,m,t.locationInfo);if(e.fields?.length){const r=new _(e.fields);for(const c of p){const g=r.get(c.name);g&&Object.assign(c,g)}}if(!p.some((r=>r.type==="esriFieldTypeOID"&&(n.objectIdField=r.name,!0)))){const r={name:"__OBJECTID",alias:"__OBJECTID",type:"esriFieldTypeOID",editable:!1,nullable:!1};n.objectIdField=r.name,p.unshift(r)}n.fields=p;const h=new _(n.fields);if(t.locationInfo&&(t.locationInfo.latitudeFieldName=h.get(t.locationInfo.latitudeFieldName).name,t.locationInfo.longitudeFieldName=h.get(t.locationInfo.longitudeFieldName).name),n.timeInfo){const r=n.timeInfo;if(r.startTimeField){const c=h.get(r.startTimeField);c?(r.startTimeField=c.name,c.type="esriFieldTypeDate"):r.startTimeField=null}if(r.endTimeField){const c=h.get(r.endTimeField);c?(r.endTimeField=c.name,c.type="esriFieldTypeDate"):r.endTimeField=null}if(r.trackIdField){const c=h.get(r.trackIdField);r.trackIdField=c?c.name:null}r.startTimeField||r.endTimeField||(n.timeInfo=null)}return t}export{st as default};
