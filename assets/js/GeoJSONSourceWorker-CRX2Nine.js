import{eS as I,s as E,eT as D,ci as Q,eU as v,cj as N,dz as Z,dd as P,V as G,dN as M,H as B,eV as R}from"./test-Dp3_P59c.js";import{u as z,l as L,r as U,s as V,o as H}from"./featureConversionUtils-BISEwGRc.js";import{u as J}from"./executeQueryForSnapping-CbYgBzFT.js";import{f as W}from"./FeatureStore-nrYqjidG.js";import{x as b,j as T}from"./queryUtils-BylZ_vR4.js";import{L as Y}from"./QueryEngine-DobYVqGU.js";import{I as K,N as X,E as ee}from"./geojson-49b60rv_.js";import{l as te,a as ie,u as se}from"./clientSideDefaults-BGTRnQvd.js";import{S as re,E as ne,d as w,f as j,p as F,h as $}from"./sourceUtils-CHvioHuc.js";import{Z as O}from"./FieldsIndex-dVB9L1ZQ.js";import"./index-CulM0VMq.js";import"./vendor-CHjNVy30.js";import"./station-CTe-uNfl.js";import"./OptimizedFeature-99IiHQtf.js";import"./memoryEstimations-T_QTZf5l.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-CBFS3Cpf.js";import"./BoundsStore-CMDWSQDA.js";import"./PooledRBush-QGhfJP2I.js";import"./optimizedFeatureQueryEngineAdapter-SquFTs-9.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-hvR0AHSq.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./WhereClause-RDKtpLzj.js";import"./TimeOnly-CSJYFsnz.js";import"./enum-DYiiI-Eb.js";import"./UnknownTimeZone-CD5-cTzw.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-Cx-L7xZw.js";import"./utils-B1C6I_8d.js";import"./heatmapUtils-DD4QNsCV.js";import"./utils-Bcyv0ubY.js";import"./utils-Czy_3xGG.js";import"./ClassBreaksDefinition-DYQp9k4a.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-CoCzclvP.js";import"./NormalizationBinParametersMixin-D7jY13wx.js";import"./date-DCujAECq.js";import"./defaultsJSON-GKolV7NZ.js";const ae={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:re};class He{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[i]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),r=K(i,{geometryType:e.geometryType}),u=e.fields||r.fields||[],l=e.hasZ!=null?e.hasZ:r.hasZ,d=r.geometryType;let m=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const f=e.spatialReference||I;let o=e.timeInfo;u===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const y=new O(u);let n=y.get(m);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,m=n.name):(n={alias:m,name:m,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},u.unshift(n));const p={};for(const a of u){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!D.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==n.name){const _=Q(a);_!==void 0&&(p[a.name]=_)}a.length==null&&(a.length=v(a))}if(o){if(o.startTimeField){const a=y.get(o.startTimeField);a?(o.startTimeField=a.name,a.type="esriFieldTypeDate"):o.startTimeField=null}if(o.endTimeField){const a=y.get(o.endTimeField);a?(o.endTimeField=a.name,a.type="esriFieldTypeDate"):o.endTimeField=null}if(o.trackIdField){const a=y.get(o.trackIdField);a?o.trackIdField=a.name:(o.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:o}}))}o.startTimeField||o.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:o}}),o=null)}const h=d?se(d):void 0,c=y.dateFields.length?{timeZoneIANA:N}:null,g={warnings:s,featureErrors:[],layerDefinition:{...ae,drawingInfo:h??void 0,templates:te(p),extent:void 0,geometryType:d,objectIdField:m,fields:u,hasZ:!!l,timeInfo:o,dateFieldsTimeReference:c}},C={type:"object-id",fieldName:m};this._queryEngine=new Y({fieldsIndex:O.fromLayerJSON({fields:u,timeInfo:o,dateFieldsTimeReference:c}),geometryType:d,hasM:!1,hasZ:l,featureIdInfo:C,spatialReference:f,timeInfo:o,featureStore:new W({geometryType:d,hasM:!1,hasZ:l})});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(n);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=ie(p,m);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const k=this._normalizeFeatures(x,g.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:A,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(g.layerDefinition.extent=A,S){const{start:a,end:_}=S;g.layerDefinition.timeInfo.timeExtent=[a,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([ne(t,s),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),J(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=Z(this._snapshotFeatures),this._snapshotTask.promise.then((i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const r=this._normalizeFeatures(i);r&&this._queryEngine.featureStore.addMany(r)}),(i=>{this._queryEngine.featureStore.clear(),P(i)||G.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:i}))})),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=X(e,{geometryType:t,hasZ:s,objectIdField:i});if(!M(this._queryEngine.spatialReference,I))for(const u of r)u.geometry!=null&&(u.geometry=z(T(L(u.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await B(t??"",{responseType:"json",query:{...s},signal:e})).data;return ee(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const u of e){const l=this._createDefaultAttributes(),d=w(i,l,u.attributes,!0);d?t?.push(d):(this._assignObjectId(l,u.attributes,!0),u.attributes=l,u.objectId=l[s],r.push(u))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),s?.length&&this._applyUpdateEdits(r,s),i?.length){for(const d of i)r.deleteResults.push(j(d));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:u,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:u,timeExtent:l,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:u,objectIdField:l,spatialReference:d,featureStore:m,fieldsIndex:f}=this._queryEngine,o=[],y={type:"object-id",fieldName:l};for(const n of t){if(n.geometry&&i!==R(n.geometry)){s.push(F("Incorrect geometry type."));continue}const p=this._createDefaultAttributes(),h=w(f,p,n.attributes);if(h)s.push(h);else{if(this._assignObjectId(p,n.attributes),n.attributes=p,n.uid!=null){const c=n.attributes[l];e.uidToObjectId[n.uid]=c}if(n.geometry!=null){const c=n.geometry.spatialReference??d;n.geometry=T($(n.geometry,c),c,d)}o.push(n),s.push(j(n.attributes[l]))}}m.addMany(U([],o,i,u,r,y))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:u,spatialReference:l,featureStore:d,fieldsIndex:m}=this._queryEngine,f={type:"object-id",fieldName:u};for(const o of t){const{attributes:y,geometry:n}=o,p=y?.[u];if(p==null){e.push(F(`Identifier field ${u} missing`));continue}if(!d.has(p)){e.push(F(`Feature with object id ${p} missing`));continue}const h=V(d.getFeature(p),s,r,i);if(n!=null){if(s!==R(n)){e.push(F("Incorrect geometry type."));continue}const c=n.spatialReference??l;h.geometry=T($(n,c),c,l)}if(y){const c=w(m,h.attributes,y);if(c){e.push(c);continue}}d.add(H(h,s,r,i,f)),e.push(j(p))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await b(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{He as default};
