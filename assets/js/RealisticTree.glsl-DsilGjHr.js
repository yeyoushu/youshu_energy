import{U as x,a8 as b,n as w,a9 as G,as as L,S as d,dW as B,jd as j,a4 as E,fS as M,ja as _,b4 as U,il as R,ii as P,rT as p}from"./test-Dp3_P59c.js";import{m as I,f as V,g as C,h as A,i as O,C as D,s as W}from"./dehydratedFeatureUtils-DcFFwRE_.js";import{i as z,y as N}from"./memoryEstimations-T_QTZf5l.js";import{E as h,i as J}from"./IntersectorType-gQim6TH1.js";import{e as K}from"./VertexAttribute-BfkzOMLV.js";import"./glsl-Cj7KC756.js";import"./BindType-BBwFZqyN.js";import"./ShaderBuilder-C59RPvP-.js";import{i as k,m as q,v as F,K as H,_ as Q}from"./DefaultMaterial-DGwevQK0.js";import"./ShaderOutput-Bdd80V3g.js";import"./OutputColorHighlightOID.glsl-BSerirNU.js";import"./NormalAttribute.glsl-DSEZpnU6.js";import"./boundedPlane-BnCrBdov.js";import"./basicInterfaces-N86vRvDz.js";class X{get ray(){return this._ray}get distanceInRenderSpace(){return this.distance==null?null:(b(f,this.ray.direction,this.distance),x(f))}withinDistance(e){return!!v(this)&&this.distanceInRenderSpace<=e}getIntersectionPoint(e){return!!v(this)&&(b(f,this.ray.direction,this.distance),G(e,this.ray.origin,f),!0)}getTransformedNormal(e){return d(m,this.normal),m[3]=0,j(m,m,this.transformation),d(e,m),L(e,e)}constructor(e){this.intersector=h.OBJECT,this.normal=w(),this.transformation=E(),this._ray=M(),this.init(e)}init(e){this.distance=this.target=this.drapedLayerOrder=this.renderPriority=null,this.intersector=h.OBJECT,_(e,this._ray)}set(e,r,t,i,s,a,o){this.intersector=e,this.distance=t,d(this.normal,i??U),R(this.transformation,s??P),this.target=r,this.drapedLayerOrder=a,this.renderPriority=o}copy(e){_(e.ray,this._ray),this.intersector=e.intersector,this.distance=e.distance,this.target=e.target,this.drapedLayerOrder=e.drapedLayerOrder,this.renderPriority=e.renderPriority,d(this.normal,e.normal),R(this.transformation,e.transformation)}}function v(n){return n?.distance!=null}const f=w(),m=B();let Y=class{constructor(e){this.layerViewUid=e}};class Z extends Y{constructor(e,r){super(e),this.graphicUid=r}}class ee extends Z{constructor(e,r,t,i,s){super(e,r),this.layerViewUid=e,this.graphicUid=r,this.triangleNr=t,this.baseBoundingSphere=i,this.numLodLevels=s}}let te=class{constructor(e,r,t,i){this.material=e,this.bufferWriter=e.createBufferWriter(),this.vertexBufferLayout=this.bufferWriter.vertexBufferLayout,this.buffer=r,this.elementCount=t,this.boundingInfo=i}get numTriangles(){return this.elementCount/3}get numVertices(){return this.elementCount}computeUsedMemory(){return this.buffer.byteLength+N}getRenderGeometry(){return this}intersect(e,r,t,i,s,a,o,c){const u=this.bufferWriter,l=this.buffer;u.intersect(l,this.material.parameters,null,e,t,i,((g,y,$)=>T(g,y,$,e,r,a,o,s,c)))}};class re{constructor(e){this.engineGeometry=e}get material(){return this.engineGeometry.material}get numVertices(){return this.engineGeometry.attributes.get(K.POSITION).indices.length}get numTriangles(){return this.engineGeometry.indexCount/3}get boundingInfo(){return this.engineGeometry.boundingInfo}computeUsedMemory(){return Array.from(this.engineGeometry.attributes.values()).reduce(((e,r)=>e+z(r.data,r.indices)),0)}getRenderGeometry(){const e=this.material,r=this.engineGeometry,t=r.attributes,i=r.boundingInfo,s=e.createBufferWriter(),a=s.vertexBufferLayout,o=s.elementCount(t),c=a.createBuffer(o);return s.write(null,null,t,null,c,0),new te(e,c.buffer,o,i)}intersect(e,r,t,i,s,a,o,c){const u=this.engineGeometry;this.material.intersect(u,e.transform.transform,e,t,i,((l,g,y)=>T(l,g,y,e,r,a,o,s,c)))}}function T(n,e,r,t,i,s,a,o,c){if(n<0||i&&!i(t.rayBegin,t.rayEnd,n))return;const u=new ee(s.layerViewUid,s.graphicUid(o),r,a,c);if((t.results.min.distance==null||n<t.results.min.distance)&&t.results.min.set(h.LOD,u,n,e,t.transform.transform),(t.results.max.distance==null||n>t.results.max.distance)&&t.results.max.set(h.LOD,u,n,e,t.transform.transform),t.options.store===J.ALL){const l=new X(t.results.min.ray);l.set(h.LOD,u,n,e,t.transform.transform),t.results.all.push(l)}}let se=class{constructor(e,r=null){this.geometry=e,this.textures=r}get material(){return this.geometry.material}get numTriangles(){return this.geometry.numTriangles}};class ne{constructor(e,r,t){this.components=e,this.minScreenSpaceRadius=r,this.pivotOffset=t;const i=p(this.components.map((s=>s.geometry)));this.numVertices=i.reduce(((s,a)=>s+a.numVertices),0)}}class ie{constructor(e){this.levels=e,this.levels.sort(((r,t)=>r.minScreenSpaceRadius===t.minScreenSpaceRadius?r.numVertices-t.numVertices:r.minScreenSpaceRadius-t.minScreenSpaceRadius))}getMaterials(){const e=[];return this.levels.forEach((r=>r.components.forEach((t=>e.push(t.geometry.material))))),p(e)}getTextures(){const e=new Array;return this.levels.forEach((r=>r.components.forEach((t=>{t.textures!=null&&e.push(...t.textures)})))),p(e)}getGeometries(){const e=new Array;return this.levels.forEach((r=>r.components.forEach((t=>{e.push(t.geometry)})))),p(e)}getEngineGeometries(){return this.getGeometries().map((e=>e.engineGeometry)).filter((e=>e!=null))}computeUsedMemory(){const e=this.getGeometries(),r=this.getTextures(),t=e.reduce(((i,s)=>i+s.computeUsedMemory()),0);return r.reduce(((i,s)=>i+s.usedMemory),0)+t}}function ve(n){switch(n){case"sphere":case"cube":case"diamond":case"cylinder":case"cone":case"inverted-cone":case"tetrahedron":return!0}return!1}function we(n,e){const r=(t,i,s=!1)=>new ie(t.map((a=>{const o=i(a.tesselation);return s&&I(o),new ne([new se(new re(o))],a.minScreenSpaceRadius)})));switch(n){case"sphere":return r([{tesselation:0,minScreenSpaceRadius:0},{tesselation:1,minScreenSpaceRadius:8},{tesselation:2,minScreenSpaceRadius:16},{tesselation:3,minScreenSpaceRadius:50},{tesselation:4,minScreenSpaceRadius:250}],(t=>W(e,.5,t)));case"cube":return r([{tesselation:0,minScreenSpaceRadius:0}],(()=>D(e,1)));case"cone":return r(S,(t=>O(e,1,.5,t,!1)),!0);case"inverted-cone":return r(S,(t=>O(e,1,.5,t,!0)),!0);case"cylinder":return r(S,(t=>A(e,1,.5,t,[0,0,1],[0,0,.5])));case"tetrahedron":return r([{tesselation:0,minScreenSpaceRadius:0}],(()=>C(e,1)),!0);case"diamond":return r([{tesselation:0,minScreenSpaceRadius:0}],(()=>V(e,1)),!0);default:return}}const S=[{tesselation:6,minScreenSpaceRadius:0},{tesselation:18,minScreenSpaceRadius:7},{tesselation:64,minScreenSpaceRadius:65}],Te=Object.freeze(Object.defineProperty({__proto__:null,build:k},Symbol.toStringTag,{value:"Module"})),$e=Object.freeze(Object.defineProperty({__proto__:null,build:q,getRadius:F},Symbol.toStringTag,{value:"Module"})),xe=Object.freeze(Object.defineProperty({__proto__:null,build:H},Symbol.toStringTag,{value:"Module"})),Ge=Object.freeze(Object.defineProperty({__proto__:null,build:Q},Symbol.toStringTag,{value:"Module"}));export{xe as D,Ge as R,ve as S,se as a,re as b,Te as c,$e as d,ne as f,ie as h,we as l,X as p};
