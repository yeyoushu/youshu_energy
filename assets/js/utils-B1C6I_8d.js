import{eL as v,cn as z,cV as C,f as O,eM as R,c_ as V,_,s as U,dV as A}from"./test-Dp3_P59c.js";import{j as G}from"./quantizationUtils-Cx-L7xZw.js";import{u as Y,l as D}from"./heatmapUtils-DD4QNsCV.js";import{$ as L}from"./utils-Bcyv0ubY.js";import{m as E,B as S}from"./utils-Czy_3xGG.js";let f=null;const P=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function k(e,t,n){return e.x<0?e.x+=t:e.x>n&&(e.x-=t),e}function ee(e,t,n,i){const r=R(n)?V(n):null,s=r?Math.round((r.valid[1]-r.valid[0])/t.scale[0]):null;return e.map((l=>{const a=new _(l.geometry);return G(t,a,a),l.geometry=r?k(a,s??0,i[0]):a,l}))}function te(e,t=18,n,i,r){const s=new Float64Array(i*r);t=Math.round(A(t));let l=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY;const F=Y(n);for(const{geometry:p,attributes:N}of e){const{x:g,y:c}=p,w=Math.max(0,g-t),b=Math.max(0,c-t),M=Math.min(r,c+t),x=Math.min(i,g+t),h=+F(N);for(let m=b;m<M;m++)for(let d=w;d<x;d++){const $=m*i+d,I=D(d-g,m-c,t)*h,u=s[$]+=I;l=Math.min(l,u),a=Math.max(a,u)}}return{min:l,max:a}}function q(e){const t=P.exec(e);if(!t)return null;const{hh:n,mm:i,ss:r,ms:s}=t.groups;return Number(n)*v.hours+Number(i)*v.minutes+Number(r)*v.seconds+Number(s||0)}async function ne(e,t,n=!0){if(!t)return[];const{field:i,field2:r,field3:s,fieldDelimiter:l,fieldInfos:a,timeZone:F}=e,p=i&&a?.find((u=>u.name.toLowerCase()===i.toLowerCase())),N=!!p&&z(p),g=!!p&&L(p),c=e.valueExpression,w=e.normalizationType,b=e.normalizationField,M=e.normalizationTotal,x=[],h=e.viewInfoParams;let m=null,d=null;if(c){if(!f){const{arcadeUtils:u}=await C();f=u}f.hasGeometryOperations(c)&&await f.enableGeometryOperations(),m=f.createFunction(c),d=h?f.getViewInfo({viewingMode:h.viewingMode,scale:h.scale,spatialReference:new O(h.spatialReference)}):null}const $=e.fieldInfos,I=!(t[0]&&"declaredClass"in t[0]&&t[0].declaredClass==="esri.Graphic")&&$?{fields:$}:null;return t.forEach((u=>{const y=u.attributes;let o;if(c){const T=I?{...u,layer:I}:u,j=f.createExecContext(T,d,F);o=f.executeFunction(m,j)}else y&&(o=y[i],r?(o=`${E(o)}${l}${E(y[r])}`,s&&(o=`${o}${l}${E(y[s])}`)):typeof o=="string"&&n&&(g?o=o?new Date(o).getTime():null:N&&(o=o?q(o):null)));if(w&&typeof o=="number"&&isFinite(o)){const T=y&&parseFloat(y[b]);o=S(o,w,T,M)}x.push(o)})),x}function ie(e){const t=e.field,n=e.normalizationType,i=e.normalizationField;let r;return n==="field"?r="(NOT "+i+" = 0)":n!=="log"&&n!=="natural-log"&&n!=="square-root"||(r=`(${t} > 0)`),r}function re(e,t,n){const i=t!=null?e+" >= "+t:"",r=n!=null?e+" <= "+n:"";let s="";return s=i&&r?B(i,r):i||r,s?"("+s+")":""}function B(e,t){let n=e??"";return t!=null&&t&&(n=n?"("+n+") AND ("+t+")":t),n}function oe(e,t){if(e&&e.spatialRelationship!=="intersects")return new U(t,"Only 'intersects' spatialRelationship is supported for featureFilter")}function se(e,t,n){const i=Z({layer:e,fields:t});if(i.length)return new U(n,"Unknown fields: "+i.join(", ")+". You can only use fields defined in the layer schema");const r=H({layer:e,fields:t});return r.length?new U(n,"Unsupported fields: "+r.join(", ")+". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true"):void 0}function Z(e){const t=e.layer;return e.fields.filter((n=>!t.getField(n)))}function H(e){const t=e.layer;return e.fields.filter((n=>{const i=t.getFieldUsageInfo(n);return!i||!i.supportsStatistics}))}export{ie as F,q as I,oe as M,re as N,se as T,B as U,ne as b,te as w,ee as x};
