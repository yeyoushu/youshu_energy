import{fq as T,fu as D,fr as _,fs as S,ft as L,fv as v,aw as m,e9 as A,fD as k,F as N,s as p,e4 as l,fO as C,V as y,cm as c,fC as I,fP as E,fQ as M,fR as G,fh as $,dg as R,fw as O,v as n,w as r,d9 as x,bQ as U,fB as F,x as K}from"./test-Dp3_P59c.js";import{I as u,i as g,E as j,m as P,h as z}from"./KnowledgeGraphSublayer-C5EsMct9.js";import{l as H}from"./ArcGISService-CvJlLKAW.js";import{e as V}from"./CustomParametersMixin-DnycMbXv.js";import{u as B}from"./knowledgeGraphService-pMLlB5D4.js";import"./index-CulM0VMq.js";import"./vendor-CHjNVy30.js";import"./station-CTe-uNfl.js";import"./OptimizedFeature-99IiHQtf.js";import"./memoryEstimations-T_QTZf5l.js";import"./constants-B4mRqufT.js";import"./featureConversionUtils-BISEwGRc.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./GraphQueryStreaming-5iEtxuCV.js";import"./FeatureStore-nrYqjidG.js";import"./BoundsStore-CMDWSQDA.js";import"./PooledRBush-QGhfJP2I.js";import"./timeSupport-CBFS3Cpf.js";import"./queryUtils-BylZ_vR4.js";import"./json-Wa8cmqdu.js";import"./optimizedFeatureQueryEngineAdapter-SquFTs-9.js";import"./QueryEngine-DobYVqGU.js";import"./WhereClauseCache-hvR0AHSq.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./WhereClause-RDKtpLzj.js";import"./TimeOnly-CSJYFsnz.js";import"./enum-DYiiI-Eb.js";import"./UnknownTimeZone-CD5-cTzw.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-Cx-L7xZw.js";import"./utils-B1C6I_8d.js";import"./heatmapUtils-DD4QNsCV.js";import"./utils-Bcyv0ubY.js";import"./utils-Czy_3xGG.js";import"./ClassBreaksDefinition-DYQp9k4a.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-CoCzclvP.js";import"./NormalizationBinParametersMixin-D7jY13wx.js";import"./FieldsIndex-dVB9L1ZQ.js";import"./clientSideDefaults-BGTRnQvd.js";import"./defaultsJSON-GKolV7NZ.js";import"./fieldProperties-B5lKbTPg.js";import"./labelingInfo-HpcBILMX.js";import"./SimpleRenderer-Cv_4-yU7.js";import"./commonProperties-Cz4LY7so.js";import"./colorRamps-B0gQZwFY.js";import"./ColorStop-Cu9MX0m5.js";import"./visualVariableUtils-CZtJQX17.js";import"./jsonUtils-C0_9DqtZ.js";import"./defaults3D-B9tjgcmU.js";import"./defaults-B2ew532g.js";import"./UniqueValueRenderer-U8EJ9Zmb.js";import"./diffUtils-CRH5h29A.js";import"./RendererLegendOptions-BX0ZTuxr.js";import"./styleUtils-B7fY0eUg.js";import"./labelUtils-BD42FNJJ.js";import"./DisplayFilteredLayer-NgY85tE-.js";import"./scaleUtils-BTu79So4.js";import"./displayFilterUtils-DEO713VP.js";import"./FeatureEffectLayer-26UFsVao.js";import"./FeatureEffect-CuBFMCn2.js";import"./FeatureFilter-Dp8Yy4C1.js";import"./FeatureReductionLayer-Dggj6XFo.js";import"./FeatureReductionSelection-D2_2kWu1.js";import"./jsonUtils-ckGU7SCY.js";import"./typeUtils-D_YGTMGu.js";import"./ClassBreaksRenderer-D8UibT1q.js";import"./DictionaryScriptEvaluator-BP8szh1a.js";import"./ArcadeExpression-Dcbbajtk.js";import"./utils-Bn4MiHWW.js";import"./defaultCIMValues-eS1WuCTt.js";import"./enums-DCdj6Lab.js";import"./OrderedLayer-D6-zNrUd.js";import"./OrderByInfo-BRAutEHC.js";import"./TemporalLayer-DVwyCMWq.js";import"./TimeInfo-BfXh-Eak.js";import"./FeatureSet-DR2_MLz0.js";import"./popupUtils-sYzRdAbr.js";import"./utils-GYScHLq5.js";import"./cimSymbolUtils-BwOwUl_r.js";import"./networkEnums-2v9fEE2p.js";import"./GPMessage-Bekmsege.js";let o=class extends T(D(_(H(S(L(v(V(O)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(m.ofType(u)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(m.ofType(u)),this.type="knowledge-graph",this.url=null,this.addHandles(A((()=>this.layers.concat(this.tables)),((i,t)=>this._handleSublayersChange(i,t)),k))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(i){N(i)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await g(this)}async _fetchMetadata(){if(!this.url)throw new p("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await B(this.url);this.knowledgeGraph=e,this._forEachGraphType((i=>{i.name&&this._graphTypeLookup.set(i.name,i)}))}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===l.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new j({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await P(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach((i=>{const t=this._graphTypeLookup.get(i.graphTypeName);t&&!e.namedTypeDefinitions.has(t.name)&&e.namedTypeDefinitions.set(t.name,{useAllData:!0})})),this.setAtOrigin("inclusionModeDefinition",e,C(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if(i?.size>0)i.forEach(((t,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return y.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(y.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(a))}));else if(!e.generateAllSublayers)throw new p("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],i=[];const{inclusionModeDefinition:t}=this,a=t?.namedTypeDefinitions;!t||t.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],i=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach(((s,d)=>{const h=this._graphTypeLookup.get(d);switch(h?.type){case"relationship":i.push(h);break;case"entity":e.push(h)}})),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach((i=>{e(i)}))}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,t=[];for(const a of e)this._graphTypeLookup.has(a.typeName)&&(this.layers.concat(this.tables).some((s=>s.objectType.name===a.typeName))===!1&&(this.dataManager.sublayerCaches.set(a.typeName,new Map),i.add(a.typeName)),c(this.sublayerIdsCache,a.typeName,(()=>new Set)).add(a.id),t.push(a));this.dataManager.addToLayer(t);for(const a of i){const s=this._graphTypeLookup.get(a);s&&(this._addSublayer(s),s.type==="entity"?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a))}await g(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,t){e.forEach((a=>{const s=this._createSublayer(a);t(s)&&i.push(s),this._updateSublayerCaches(a)}))}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new u({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach((t=>{t.parentCompositeLayer=this;const a=e.find((s=>s.type===t.graphType&&s.name===t.graphTypeName));a&&(t.objectType=a,this._updateSublayerCaches(a))}))}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,i,t,a){e[i]="<pending>",t.pendingOperations.push(Q(this.inclusionModeDefinition).then((s=>{const d=q(a);e[i]=d.itemRelativeUrl,t.toAdd.push({resource:d,content:{type:"blob",blob:s},compress:!1,finish:h=>{this.definitionSetMap=h.url}})})))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach((t=>{t.parent=null})),this.removeHandles("sublayers-owner")),e&&(e.forEach((t=>{t.parent=this})),this.addHandles([e.on("after-add",(({item:t})=>{t.parent=this})),e.on("after-remove",(({item:t})=>{t.parent=null}))],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=l.PORTAL_ITEM&&e<l.USER}readDefinitionSetMap(e,i,t){return I(e,t)}writeDefinitionSetMap(e,i,t,a){const s=a?.portalItem,d=a?.resources,h=E(a?.origin);if(!s||!d||h==null)return void(e&&(i[t]=M(e,a)));const{inclusionModeDefinition:w}=this;if(!w||this._displaysAllRecords(w))return void(this.definitionSetMap=null);const f=this.originIdOf("inclusionModeDefinition");if(f===l.USER||this._namedTypesModified||h<f)this._saveUrlAsNewResource(i,t,d,s);else if(h===f&&e){const b=M(e,a);G(b)?this._saveUrlAsNewResource(i,t,d,s):i[t]=b}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):y.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===l.DEFAULTS?this.originIdOf("layers")===l.DEFAULTS?this._createSublayers(e,this.layers,(i=>!!i.geometryType)):this._updateSublayers(e,this.layers):this.layers=new m,this.tables.length||this.originIdOf("layers")===l.DEFAULTS?this.originIdOf("tables")===l.DEFAULTS?this._createSublayers(e,this.tables,(i=>!i.geometryType)):this._updateSublayers(e,this.tables):this.tables=new m,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((i,t)=>{const a=c(this.sublayerIdsCache,t,(()=>new Set));i.members?.forEach((s=>{a.add(s.id)}))}))}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),c(this.sublayerIdsCache,e,(()=>new Set));const t=this._addSublayer(i);return i.type==="entity"?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await g(this,[e]),this._refreshNamedTypes(),t}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e)?.useAllData?y.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else y.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||y.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&y.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())c(this.sublayerIdsCache,e,(()=>new Set)),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();const i=[];for(const t of e)this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.members?.has(t.id)&&i.push(t);this.dataManager.removeFromLayer(i);for(const t of i)this.sublayerIdsCache.get(t.typeName)?.delete(t.id);return this._refreshNamedTypes(),i}};n([r()],o.prototype,"dataManager",void 0),n([r({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],o.prototype,"definitionSetMap",void 0),n([x("definitionSetMap")],o.prototype,"readDefinitionSetMap",null),n([U("definitionSetMap")],o.prototype,"writeDefinitionSetMap",null),n([r()],o.prototype,"inclusionModeDefinition",null),n([r()],o.prototype,"knowledgeGraph",void 0),n([r({type:m.ofType(u),json:{write:{ignoreOrigin:!0}}})],o.prototype,"layers",void 0),n([r()],o.prototype,"memberEntityTypes",void 0),n([r()],o.prototype,"memberRelationshipTypes",void 0),n([r({type:["KnowledgeGraphLayer"]})],o.prototype,"operationalLayerType",void 0),n([r()],o.prototype,"sublayerIdsCache",void 0),n([r({type:m.ofType(u),json:{write:{ignoreOrigin:!0}}})],o.prototype,"tables",void 0),n([r({json:{read:!1}})],o.prototype,"type",void 0),n([r(F)],o.prototype,"url",void 0),o=n([K("esri.layers.KnowledgeGraphLayer")],o);const Si=o;async function Q(e){const i=await z(e);return new Blob([i],{type:"application/x-protobuf"})}function q(e){const i=`definitionSetMap-${$()}.dat`,t=R("knowledgeGraphLayer",i);return e.resourceFromPath(t)}export{Si as default};
