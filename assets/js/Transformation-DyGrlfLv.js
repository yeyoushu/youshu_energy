import{m as h}from"./Point2D-COgQ1fyf.js";import{x as m}from"./Transformation2D-BGxYmbTi.js";import{b1 as l}from"./test-DMnSxVQs.js";import"./index-BJQUWR-1.js";import"./vendor-CHjNVy30.js";import"./station-DfQHTTxy.js";const f={uniform:0,conformal:1,rigid:2,"rigid-motion":3,general:4},o=e=>e.map((t=>new h(t.x,t.y)));class y{constructor(){this.transform=new m}calculateErrors(t,r){const s=t.length,n=r.length;if(s!==n)throw new Error(`The input length (${s}) is not the same as output length (${n})`);const i=[];return{rms:this.transform.calculateErrors(s,o(t),o(r),i),errorsOut:i}}flipX(t,r){return this.transform.flipX(t,r),this}flipY(t,r){return this.transform.flipY(t,r),this}initializeFromControlPoints(t,r,s,n){const i=r.length,a=s.length;if(i!==a)throw new Error(`The input length (${i}) is not the same as output length (${a})`);this.transform.initializeFromControlPoints(f[t],i,o(r),o(s),n?.transform)}isIdentity(){return this.transform.isIdentity()}rotate(t,r,s){const n=l(t);return r!=null&&s!=null?this.transform.rotateAngleAbout(n,new h(r,s)):this.transform.rotateAngle(n),this}scale(t,r){return this.transform.scale(t,r),this}setIdentity(){this.transform.setIdentity()}setSwapCoordinates(){return this.transform.setSwapCoordinates(),this}shear(t,r){return this.transform.shear(t,r),this}shift(t,r){return this.transform.shiftCoords(t,r),this}}export{y as default};
