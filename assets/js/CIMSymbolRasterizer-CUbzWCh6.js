import{bT as k,bS as F}from"./test-DMnSxVQs.js";import{i as O}from"./CIMResourceManager-CzLPhhph.js";import{a as G,h as $,u as j}from"./CIMSymbolHelper-zD7d9Mxs.js";import{OverrideHelper as q}from"./OverrideHelper-CMSF28Z-.js";import{T as I,R as z}from"./rasterizingUtils-C0Atwepw.js";import{z as D}from"./utils-y48t8Afq.js";import"./index-BJQUWR-1.js";import"./vendor-CHjNVy30.js";import"./station-DfQHTTxy.js";import"./BidiEngine-QXap_35O.js";import"./OptimizedFeature-C54A3ei6.js";import"./memoryEstimations-Bf3XeyNh.js";import"./GeometryUtils-BVOVYLKn.js";import"./enums-DCdj6Lab.js";import"./defaultCIMValues-eS1WuCTt.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BjWh8LA9.js";import"./defaults-CxYRXl92.js";import"./defaultsJSON-GKolV7NZ.js";import"./colorUtils-BIivfTto.js";import"./FieldsIndex-HhUW4mjA.js";import"./UnknownTimeZone-BTcI1Sc1.js";import"./ArcadeExpression-DICBwx3X.js";import"./TimeOnly-6nuEd6-R.js";import"./enum-Dj4NXxC3.js";import"./callExpressionWithFeature-CZMTqb1s.js";import"./quantizationUtils-DwvMSTst.js";import"./floatRGBA-BSE9nSch.js";const A=96/72;class wt{constructor(a){this._spatialReference=a,this._imageDataCanvas=null,this._cimResourceManager=new O}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(a,n,m,R,_,s,c,l,p,x){if(!a)return null;const{data:d}=a;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:C}=d;s||(s=D(C));const o=await q.resolveSymbolOverrides(d,n,this._spatialReference,_,s,c,l),w=this._cimResourceManager,b=[];G.fetchResources(o,w,b),G.fetchFonts(o,w,b),b.length>0&&await Promise.all(b);const{width:e,height:r}=m;let y=E(s,e,r,R,x);const t=G.getEnvelope(o,y,w);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let g=1,S=0,v=0;switch(C.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let h=1;t.height>r&&(h=r/t.height),R==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(h=r/t.height)),g=Math.min(i,h),S=t.x+t.width/2,v=t.y+t.height/2}break;case"CIMLineSymbol":if(x){v=t.y+t.height/2,S=t.x+t.width/2;const i=t.width-e,h=t.height-r;y={paths:I(y.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{(p||t.height>r)&&(g=r/t.height),v=t.y+t.height/2;const i=t.x*g+e/2,h=(t.x+t.width)*g+e/2,M=k(y)?y.paths:F(y)?y.rings:null;if(M===null)throw new Error("Bad geometry, can't rasterise symbol!");M[0][0][0]-=i/g,M[0][2][0]-=(h-e)/g}break;case"CIMPolygonSymbol":if(x){v=t.y+t.height/2,S=t.x+t.width/2;const i=t.width-e,h=t.height-r;y={paths:I(y.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{S=t.x+t.width/2,v=t.y+t.height/2;const i=t.x*g+e/2,h=(t.x+t.width)*g+e/2,M=t.y*g+r/2,P=(t.y+t.height)*g+r/2,{rings:u}=y;i<0&&(u[0][0][0]-=i,u[0][3][0]-=i,u[0][4][0]-=i),M<0&&(u[0][0][1]+=M,u[0][1][1]+=M,u[0][4][1]+=M),h>e&&(u[0][1][0]-=h-e,u[0][2][0]-=h-e),P>r&&(u[0][2][1]+=P-r,u[0][3][1]+=P-r)}}const T={type:"cim",data:{type:"CIMSymbolReference",symbol:o}};return this.rasterize(T,e,r,S,v,g,s,1,y)}rasterize(a,n,m,R,_,s,c,l=0,p=null,x=window.devicePixelRatio||1){const{data:d}=a;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:C}=d,o=this._canvas,w=x*A;o.width=n*w,o.height=m*w,c||(c=D(C)),p||(p=E(c,n,m,"legend")),o.width+=2*l,o.height+=2*l;const b=o.getContext("2d",{willReadFrequently:!0}),e=$.createIdentity();return e.translate(-R,-_),e.scale(s*w,-s*w),e.translate(n*w/2+l,m*w/2+l),b.clearRect(0,0,o.width,o.height),new j(b,this._cimResourceManager,e,!0).drawSymbol(C,p),b.getImageData(0,0,o.width,o.height)}}function B(f,a,n,m){return a==="esriGeometryPolygon"?{rings:z(I(f.rings,{xmin:0,ymin:0,width:n,height:m}),-1*n/2,-1*m/2)}:a==="esriGeometryPolyline"?{paths:z(I(f.paths,{xmin:0,ymin:0,width:n,height:m}),-1*n/2,-1*m/2)}:null}function E(f,a,n,m,R){const s=-a/2+1,c=a/2-1,l=n/2-1,p=-n/2+1;if(R&&(f==="esriGeometryPolygon"||f==="esriGeometryPolyline")){const x=B(R,f,a,n);if(x)return x}switch(f){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[s,0],[0,0],[c,0]]]};default:return m==="legend"?{rings:[[[s,l],[c,0],[c,p],[s,p],[s,l]]]}:{rings:[[[s,l],[c,l],[c,p],[s,p],[s,l]]]}}}export{wt as CIMSymbolRasterizer};
