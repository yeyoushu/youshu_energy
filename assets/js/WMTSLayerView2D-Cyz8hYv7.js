import{dN as h,dZ as y,d_ as w,d$ as g,e0 as I,e2 as p,dd as f,V as S,v as d,w as T,x as V}from"./test-Dp3_P59c.js";import{r as v,n as m}from"./imageUtils-BXQrCPgN.js";import{S as x}from"./LayerView2D-DxXX3c7V.js";import{u as M}from"./LayerView-Bprwomg0.js";import{i as q}from"./RefreshableLayerView-BcsUZr_I.js";import"./index-CulM0VMq.js";import"./vendor-CHjNVy30.js";import"./station-CTe-uNfl.js";import"./BitmapTechnique-CUQXuxvR.js";import"./Container-nTJJr0sk.js";import"./GraphShaderModule-BSI09JqU.js";import"./FramebufferObject-BDE4CJ-7.js";import"./VertexArrayObject-mBBhA4PL.js";import"./memoryEstimations-T_QTZf5l.js";import"./ProgramTemplate-PTbonQFa.js";import"./ShaderBuilder-C59RPvP-.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-pk2C5RYg.js";import"./bitmapUtils-DLic2owX.js";import"./WGLContainer-VMVtADP5.js";import"./Utils-Bm80xURG.js";import"./BoundingBox--wDAJExW.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-Bk9QDbvE.js";import"./enums-DCdj6Lab.js";import"./config-DHajyIwB.js";import"./featureConversionUtils-BISEwGRc.js";import"./OptimizedFeature-99IiHQtf.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./TileContainer-CL9Z8Eti.js";import"./layerViewUtils-Czal1042.js";const R=[0,0];let s=class extends q(v(x(M))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get tileMatrixSet(){const{activeLayer:e}=this.layer,{tileMatrixSet:t}=e;if(t&&h(t.tileInfo?.spatialReference,this.view.spatialReference))return t;const i=this._getTileMatrixSetBySpatialReference(e);return i&&i.id!==e.tileMatrixSetId?(e.tileMatrixSetId=i.id,i):null}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e=this.tileMatrixSet?.tileInfo;e&&(this._tileInfoView=new y(e),this._fetchQueue=new w({tileInfoView:this._tileInfoView,concurrency:16,process:(t,i)=>this.fetchTile(t,i),scheduler:this.scheduler,priority:g.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new I({cachePolicy:"keep",resampling:!0,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.addAttachHandles(this._updatingHandles.add((()=>[this.layer?.activeLayer?.styleId,this.tileMatrixSet]),(()=>this.doRefresh()))),super.attach())}detach(){super.detach(),this._tileStrategy?.destroy(),this._fetchQueue?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){return this.layer.activeLayer.tileMatrixSets?.some((t=>h(t.tileInfo?.spatialReference,e)))??!1}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh((e=>this._updatingHandles.addPromise(this._enqueueTileFetch(e))))}}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(t)),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>e.destroy())),this.requestUpdate()}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:o=0}=t;if(!i)return this._fetchImage(e,r);const a=new p(0,0,0,0);let n;try{await i.fetchAvailabilityUpsample(e.level,e.row,e.col,a,{signal:r}),n=await this._fetchImage(a,r)}catch(l){if(f(l))throw l;if(o<3){const c=this._tileInfoView.getTileParentId(e.id);if(c){const u=new p(c),_=await this.fetchTile(u,{...t,resamplingLevel:o+1});return m(this._tileInfoView,_,u,e)}}throw l}return m(this._tileInfoView,n,a,e)}canResume(){const e=super.canResume();return e&&this.tileMatrixSet!==null}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",(()=>this.requestUpdate()))}catch(t){f(t)||S.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}_getTileMatrixSetBySpatialReference(e){return e.tileMatrixSets?.find((t=>h(t.tileInfo?.spatialReference,this.view.spatialReference)))}};d([T({readOnly:!0})],s.prototype,"tileMatrixSet",null),s=d([V("esri.views.2d.layers.WMTSLayerView2D")],s);const he=s;export{he as default};
