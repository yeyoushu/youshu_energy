const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/js/mapImageLayerUtils-CWkn9ZlN.js","assets/js/utils-C9bVQDGO.js","assets/js/test-DMnSxVQs.js","assets/js/index-BJQUWR-1.js","assets/js/vendor-CHjNVy30.js","assets/css/index-xCubpQZP.css","assets/js/station-DfQHTTxy.js","assets/css/test-D2ol9zJk.css","assets/js/originUtils-CmZQxivA.js","assets/js/jsonContext--JKapB0G.js","assets/js/saveUtils-C8vypMrn.js"])))=>i.map(i=>d[i]);
import{a as w}from"./index-BJQUWR-1.js";import{fq as O,fu as _,fs as $,ft as P,fv as E,fr as T,fT as A,fU as L,F,fP as v,e4 as f,fV as M,fW as R,H as g,cL as V,a_ as j,fX as N,s as b,dd as U,fw as q,v as i,w as p,fY as S,d9 as J,bQ as k,bP as W,fB as z,x as B}from"./test-DMnSxVQs.js";import{i as D}from"./scaleUtils-CNarsAnF.js";import{i as G}from"./APIKeyMixin-BwA3mwUn.js";import{m as H,f as Z,a as C}from"./SublayersOwner-Da3DYoBx.js";import{l as K}from"./ArcGISService-CmgVmE1Y.js";import{e as Q}from"./CustomParametersMixin-D2Cn_t_n.js";import{c as X}from"./TemporalLayer-C8vxSxjW.js";import{y as Y}from"./ExportImageParameters-4VzrdOV9.js";import{e as x}from"./sublayerUtils-DniI2t7F.js";import{t as ee}from"./versionUtils-BnVMs2XP.js";import{A as y}from"./interfaces-CL2NbQte.js";import"./vendor-CHjNVy30.js";import"./station-DfQHTTxy.js";import"./QueryTask-D3A8noJr.js";import"./infoFor3D-VMSlSy0z.js";import"./executeForIds-o5O2SvEE.js";import"./query-WVsuoyMs.js";import"./pbfQueryUtils-DO8eYVpO.js";import"./pbf-C2q1zdMn.js";import"./memoryEstimations-Bf3XeyNh.js";import"./OptimizedFeature-C54A3ei6.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-CYbRiGtO.js";import"./executeQueryJSON-Cr2_rwwd.js";import"./FeatureSet-bSdURJbK.js";import"./featureConversionUtils-B6zVmPj5.js";import"./OrderedLayer-CRdUPHs5.js";import"./OrderByInfo-DFCpzBzM.js";import"./labelingInfo-x9rZLFU5.js";import"./SimpleRenderer-BRmEDfY-.js";import"./commonProperties-DbyQootx.js";import"./colorRamps-CJBsWMSE.js";import"./ColorStop-DXxxp7Xk.js";import"./visualVariableUtils-L08xCRcr.js";import"./jsonUtils-8wfeekkP.js";import"./defaults3D-BelXX9Kz.js";import"./defaults-CxYRXl92.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-CGaPvNCx.js";import"./diffUtils-3YJ40hic.js";import"./RendererLegendOptions-DwnCe4OB.js";import"./styleUtils-BLaqcVJr.js";import"./NormalizationBinParametersMixin-BE2oKi81.js";import"./labelUtils-CDaO9w0G.js";import"./FeatureType-DnJwgYIO.js";import"./FeatureTemplate-DgG3ObRv.js";import"./FieldsIndex-HhUW4mjA.js";import"./UnknownTimeZone-BTcI1Sc1.js";import"./LayerFloorInfo-DSub_M9_.js";import"./Relationship-BnSDGbHe.js";import"./serviceCapabilitiesUtils-4M29g2Nx.js";import"./typeUtils-C6KCJBit.js";import"./ClassBreaksRenderer-vhcRb_6K.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./DictionaryScriptEvaluator-CJ-ldC4v.js";import"./ArcadeExpression-DICBwx3X.js";import"./TimeOnly-6nuEd6-R.js";import"./enum-Dj4NXxC3.js";import"./utils-y48t8Afq.js";import"./defaultCIMValues-eS1WuCTt.js";import"./enums-DCdj6Lab.js";import"./heatmapUtils-PVivGZel.js";import"./popupUtils-D9e_Xuim.js";import"./TimeInfo-BDG3uRT1.js";import"./floorFilterUtils-n6UOt7ty.js";let r=class extends O(X(_(H(Z(K($(P(E(T(G(Q(q)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new Y({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new A({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=L((async(t,n,s)=>{const{save:m,saveAs:a}=await w(()=>import("./mapImageLayerUtils-CWkn9ZlN.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10]));switch(t){case y.SAVE:return m(this,n);case y.SAVE_AS:return a(this,s,n)}}))}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(F).then((()=>this._fetchService(t)))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const n=t.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,n,s){if(!this.loaded||!e)return;const m=e.slice().reverse().flatten((({sublayers:o})=>o&&o.toArray().reverse())).toArray();let a=!1;const l=v(s.origin);let h;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===f.PORTAL_ITEM){const o=this.createSublayersForOrigin("service").sublayers;a=x(m,o,f.SERVICE)}else if(l>f.PORTAL_ITEM){const o=this.createSublayersForOrigin("portal-item");a=x(m,o.sublayers,v(o.origin)),h=o.originWithPartialOverrides}}const d=[],c={writeSublayerStructure:a,...s,minimumWritableOrigin:h};let u=a||this.hasVisibleLayersForOrigin(l);m.forEach((o=>{const I=o.write({},c);d.push(I),u=u||o.originOf("visible")==="user"})),d.some((o=>Object.keys(o).length>1))&&(t.layers=d),u&&(t.visibleLayers=m.filter((o=>o.visible)).map((o=>o.id)))}createExportImageParameters(e,t,n,s){const m=s?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=D({extent:e,width:t})*m;const a=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=e?.spatialReference,d=M(h);a.dpi*=m;const c={};if(s?.timeExtent){const{start:u,end:o}=s.timeExtent.toJSON();c.time=u&&o&&u===o?""+u:`${u??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:d,imageSR:d,size:t+","+n,...a,...l,...c}}async fetchImage(e,t,n,s){const{data:m}=await this._fetchImage("image",e,t,n,s);return m}async fetchImageBitmap(e,t,n,s){const{data:m,url:a}=await this._fetchImage("blob",e,t,n,s);return R(m,a,s?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,t),{extent:s,fullExtent:m,timeExtent:a}=n,l=s||m;return{fullExtent:l&&j.fromJSON(l),timeExtent:a&&V.fromJSON({start:a[0],end:a[1]})}}loadAll(){return N(this,(e=>{e(this.allSublayers),e(this.subtables)}))}async save(e){return this._debouncedSaveOperations(y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(y.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return ee(this,e)}async _fetchImage(e,t,n,s,m){const a={responseType:e,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,n,s,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(a.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:h}=await g(l,a);return{data:h,url:l}}catch(h){throw U(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};i([p(S("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),i([p({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),i([p()],r.prototype,"dpi",void 0),i([p()],r.prototype,"elevationInfo",void 0),i([p()],r.prototype,"gdbVersion",void 0),i([p()],r.prototype,"imageFormat",void 0),i([J("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),i([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),i([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),i([p()],r.prototype,"imageTransparency",void 0),i([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),i([p({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),i([p(S("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),i([p()],r.prototype,"sourceJSON",void 0),i([p({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),i([k("sublayers",{layers:{type:[C]},visibleLayers:{type:[W]}})],r.prototype,"writeSublayers",null),i([p({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),i([p({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),i([p(z)],r.prototype,"url",void 0),r=i([B("esri.layers.MapImageLayer")],r);const ct=r;export{ct as default};
