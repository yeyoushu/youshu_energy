import{ax as L,b1 as E,cw as U,cx as F,cy as O,cz as d,V as X,ba as Y,cA as W,cB as j,cC as A,cD as B,cE as z,v as a,w as c,x as H}from"./test-DMnSxVQs.js";import{u as I}from"./scaleUtils-CNarsAnF.js";import{l as T,u as _,t as k}from"./gridUtils-BNPdtvAn.js";import"./index-BJQUWR-1.js";import"./vendor-CHjNVy30.js";import"./station-DfQHTTxy.js";let s=class extends L{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){return E(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:e,grid:r}=this;if(!r||!e||!U(r.center.spatialReference,e))return null;try{const t=F(r.center,e),i=e.isWrappable&&this.view?.center!=null?O(t.x,this.view.center.x,e):t.x;return d(i,t.y,t.z)}catch(t){return X.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",t),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:r}=this;if(!r||!e)return 1;const{majorLineInterval:t,dynamicScaling:i}=r;return t<1?null:T(t,e,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?Y(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*I(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?_(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:r}=this;return r&&e?e/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,r,t){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||t.feature?.attributes&&W in t.feature.attributes)return[];const o=t.coordinateHelper.arrayToPoint(e),l=i.distance*(t.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(o,l)}fetchCandidatesSync(e,r){const t=[],{grid:i,effectiveViewRotation:n,gridRotation:o,gridCenter:l,viewMetersPerPixel:S,viewMetersPerSRUnit:g,offsetScaleFactor:w,spatialReference:f,gridMetersPerStride:C,pixelsPerStride:b}=this;if(!(i&&S&&g&&l&&f&&w&&C&&b)||!i.dynamicScaling&&b<k||!U(e.spatialReference,f))return t;const P=F(e,f),V=d(P.x,P.y,P.z),u=h(V,-o,l,-n),M=C/g*w,p=q(u,M,l),{shouldSnapX:v,shouldSnapY:y}=J(p,u,r,S,g);if(!v&&!y)return[];const D=d((v?p:u)[0],(y?p:u)[1]),R=h(D,o,l,n),$=h(p,o,l,n);if(y){const x=G(p,u,M,"y"),m=h(x,o,l,n);t.push(new j({lineStart:$,lineEnd:m,targetPoint:R,isDraped:!1}))}if(v){const x=G(p,u,M,"x"),m=h(x,o,l,n);t.push(new j({lineStart:$,lineEnd:m,targetPoint:R,isDraped:!1}))}return v&&y&&t.push(new A(R,t[0],t[1],!1)),t}};a([c({constructOnly:!0})],s.prototype,"view",void 0),a([c()],s.prototype,"options",void 0),a([c()],s.prototype,"grid",null),a([c()],s.prototype,"effectiveViewRotation",null),a([c()],s.prototype,"gridRotation",null),a([c()],s.prototype,"gridCenter",null),a([c()],s.prototype,"offsetScaleFactor",null),a([c()],s.prototype,"spatialReference",null),a([c()],s.prototype,"gridMetersPerStride",null),a([c()],s.prototype,"viewMetersPerPixel",null),a([c()],s.prototype,"viewMetersPerSRUnit",null),a([c()],s.prototype,"pixelsPerStride",null),a([c()],s.prototype,"updating",null),s=a([H("esri.views.interactive.snapping.GridSnappingEngine")],s);const h=(e,r,t,i)=>{const n=B(e[0],e[1],e[2]);return z(n,z(n,n,t,r),t,i)},q=(e,r,t)=>{const i=(e[0]-t[0])/r,n=(e[1]-t[1])/r,o=Math.trunc(i),l=Math.trunc(n),S=Math.round(i%1),g=Math.round(n%1),w=t[0]+(o+S)*r,f=t[1]+(l+g)*r;return d(w,f)},J=(e,r,t,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const o=(e[0]-r[0])/i,l=(e[1]-r[1])/i;return{shouldSnapX:Math.abs(o*n)<t,shouldSnapY:Math.abs(l*n)<t}},G=(e,r,t,i)=>{if(i==="y"){const o=r[0]>e[0]?1:-1;return d(e[0]+t*o,e[1])}const n=r[1]>e[1]?1:-1;return d(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
